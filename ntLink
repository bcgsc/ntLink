#!/usr/bin/make -rRf

# ntLink: Scaffold assemblies using long reads and minimizers
# Written by Lauren Coombe @lcoombe
# ntLink v1.1.1

# Input files
target=None
reads=None

# Path to pairing code
ntlink_path=$(shell dirname $(realpath $(MAKEFILE_LIST)))

# Window size
w=100

# Kmer size
k=32

# Number of threads
t=4

# Minimum contig size
z=1000

# Minimum edge weight
n=1

# Upper threshold for minimum edge weight (for pairing)
max_n=10

# Minimum gap size between scaffolds
g=20

# Gap size between overlapping trimmed scaffolds
merge_gap?=$g

# Minimum # anchoring ONT reads for an edge
a=1

# Maximum number of contigs in a run for full transitive edge addition
f=10

# Whether to run overlap detection code or not
overlap=True

# Fudge factor for filtering by mapping block length
x=0

# Run ntLink in conservative mode?
conservative=True

# Prefix for output files
prefix=$(target).k$(k).w$(w).z$(z)

# Indexlr parameters for overlapping
small_k=15
small_w=5

SHELL=bash -e -o pipefail
ifeq ($(shell zsh -e -o pipefail -c 'true' 2>/dev/null; echo $$?), 0)
# Set pipefail to ensure that all commands of a pipe succeed.
SHELL=zsh -e -o pipefail
# Report run ntLink_time and memory usage with zsh.
export REPORTTIME=1
export TIMEFMT=time user=%U system=%S elapsed=%E cpu=%P memory=%M job=%J
endif

# Record run ntLink_time and memory usage in a file using GNU time
v=0
ifeq ($(v), 0)
ntLink_time=
else
ifneq ($(shell command -v gtime),)
ntLink_time=command gtime -v -o $@.time
else
ntLink_time=command time -v -o $@.time
endif
endif

# Compress in parallel
ifneq ($(shell command -v pigz),)
gzip=pigz -p$t -f
else
gzip=gzip -f
endif

help:
	@echo ""
	@echo "ntLink: Scaffolding assemblies using long reads"
	@echo "ntLink v1.1.1"
	@echo "Usage: ntLink scaffold target=<target scaffolds> reads='List of long read files'"
	@echo ""
	@echo "Options:"
	@echo "target			Target assembly to be scaffolded in fasta format"
	@echo "reads			List of long read files (separated by a space)"
	@echo "prefix			Prefix of intermediate output files [<target>.k<k>.w<w>.z<z>]"
	@echo "t			Number of threads [4]"
	@echo "k			K-mer size for minimizers [32]"
	@echo "w			Window size for minimizers [100]"
	@echo "n			Minimum graph edge weight [1]"
	@echo "g			Minimum gap size (bp) [20]"
	@echo "f			Maximum number of contigs in a run for full transitive edge addition [10]"
	@echo "a			Minimum number of anchored ONT reads required for an edge [1]"
	@echo "z			Minimum size of contig (bp) to scaffold [1000]"
	@echo "v			If 1, track time and memory for each step of the pipeline [0]"
	@echo "conservative		If False, runs ntLink in stitching mode [True]"
	@echo "overlap			If True, runs extra step to attempt to identify and trim overlapping joined sequences [True]"
	@echo ""
	@echo "Note: "
	@echo "	- Ensure all assembly and read files are in the current working directory, making soft links if necessary"
	@echo ""

scaffold: check_params \
	ntLink_graph \
	abyss_scaffold

LIST = $(shell seq $(n) $(max_n))
LIST_n = $(addprefix .n, $(LIST))
path_targets = $(addsuffix .abyss-scaffold.path, $(addprefix $(prefix), $(LIST_n)))
ntLink_graph: $(target).k$(k).w$(w).tsv \
	$(prefix).n$(n).scaffold.dot

abyss_scaffold: ntLink_graph \
	$(target).k$(k).w$(w).z$(z).stitch.abyss-scaffold.fa \
	$(target).k$(k).w$(w).z$(z).ntLink.scaffolds.fa

$(target).k$(k).w$(w).z$(z).ntLink.scaffolds.fa: $(target).k$(k).w$(w).z$(z).stitch.abyss-scaffold.fa
	ln -sf $< $@
	echo "Done ntLink! Final post-ntLink scaffolds can be found in: $@"

check_params:
ifeq ($(reads), None)
	$(error ERROR: Must set reads)
endif
ifeq ($(target), None)
	$(error ERROR: Must set target)
endif

version:
	@echo "ntLink v1.1.1"
	@echo "Written by Lauren Coombe (lcoombe@bcgsc.ca)"


.PHONY: help scaffold version check_params clean
.DELETE_ON_ERROR:
.SECONDARY:

%.k$(k).w$(w).tsv: %
	$(ntLink_time) $(ntlink_path)/src/indexlr --long --pos --strand -k $(k) -w $(w) -t $(t) $< > $@

%.fa.gz: %.fa
	$(ntLink_time) $(gzip) $<

$(prefix).n$(n).scaffold.dot: $(target).k$(k).w$(w).tsv $(reads)
	$(ntLink_time)  sh -c '$(gzip) -cd $(reads) | \
	$(ntlink_path)/src/indexlr --long --pos --strand -k $(k) -w $(w) -t $(t) - | \
	$(ntlink_path)/bin/ntlink_pair.py -p $(prefix) -n $(n) -m $< -s $(target)  \
	-k $(k) -a $(a) -z $(z) -f $(f) -x $(x) -'

# Run abyss-scaffold scaffolding layout
$(prefix).n%.abyss-scaffold.path: $(prefix).n$(n).scaffold.dot
	$(ntLink_time) sh -c 'cat $(target) | \
	cut -d " " -f1  | \
	abyss-scaffold -k2 -n $* -s$(z) --min-gap $(g) - $< 1> $@ 2>$@.sterr'

$(prefix).stitch.path: $(path_targets)
ifeq ($(conservative), True)
	$(ntLink_time) $(ntlink_path)/bin/ntlink_stitch_paths.py --min_n $(n) --max_n $(max_n)  -p out \
	-g $(prefix).n$(n).scaffold.dot --conservative $^ -o $@
else
	$(ntLink_time) $(ntlink_path)/bin/ntlink_stitch_paths.py --min_n $(n) --max_n $(max_n)  -p out \
	-g $(prefix).n$(n).scaffold.dot $^ -o $@
endif
	rm -f $(prefix).n*.abyss-scaffold.path $(prefix).n*.abyss-scaffold.path.sterr

$(target).k$(small_k).w$(small_w).tsv: $(target)
	$(ntLink_time) $(ntlink_path)/src/indexlr --long --pos -k $(small_k) -w $(small_w) -t $(t) $< > $@

$(prefix).trimmed_scafs.fa: $(prefix).stitch.path $(prefix).n$(n).scaffold.dot $(target)
	$(ntLink_time) sh -c '$(ntlink_path)/bin/ntlink_filter_sequences.py --fasta $(target) \
	--dot $(prefix).n$(n).scaffold.dot --path $< -k $(small_k) -f $g |\
	$(ntlink_path)/src/indexlr --long --pos -k $(small_k) -w $(small_w) -t $(t) - |\
	$(ntlink_path)/bin/ntlink_overlap_sequences.py -m -  --path $< \
	-s $(target) -d $(prefix).n$(n).scaffold.dot -p $(prefix) -g $(g) -k $(small_k) --outgap $(merge_gap)'

ifeq ($(overlap), True)
$(target).k$(k).w$(w).z$(z).stitch.abyss-scaffold.fa: $(prefix).trimmed_scafs.fa
	$(ntLink_time) MergeContigs -k2 $< $(prefix).trimmed_scafs.path > $@
else
$(target).k$(k).w$(w).z$(z).stitch.abyss-scaffold.fa: $(target) $(prefix).stitch.path
	$(ntLink_time) MergeContigs -k2 $< $(prefix).stitch.path > $@
endif

clean: abyss_scaffold
	rm -f $(prefix).n*.abyss-scaffold.path $(prefix).n*.abyss-scaffold.path.sterr
