#!/usr/bin/make -rRf

# ntLink: Scaffold assemblies using long reads and minimizers
# Written by Lauren Coombe @lcoombe
# ntLink v0.0.1

# Input files
target=None
reads=None

# Path to pairing code
ntlink_path=$(shell dirname $(realpath $(MAKEFILE_LIST)))

# Window size
w=250

# Kmer size
k=32

# Number of threads
t=4

# Minimum contig size
z=500

# Minimum edge weight
n=2

# Minimum gap size between scaffolds
g=20

# Minimum # anchoring ONT reads for an edge
a=1

# Maximum number of contigs in a run for full transitive edge addition
f=10

# Prefix for output files
prefix=out.k$(k).w$(w).n$(n).z$(z)

SHELL=bash -e -o pipefail
ifeq ($(shell zsh -e -o pipefail -c 'true' 2>/dev/null; echo $$?), 0)
# Set pipefail to ensure that all commands of a pipe succeed.
SHELL=zsh -e -o pipefail
# Report run time and memory usage with zsh.
export REPORTTIME=1
export TIMEFMT=time user=%U system=%S elapsed=%E cpu=%P memory=%M job=%J
endif

# Record run time and memory usage in a file using GNU time
v=0
ifeq ($(v), 0)
time=
else
ifneq ($(shell command -v gtime),)
time=command gtime -v -o $@.time
else
time=command time -v -o $@.time
endif
endif

# Compress in parallel
ifneq ($(shell command -v pigz),)
gzip=pigz -p$t -f
else
gzip=gzip -f
endif

help:
	@echo ""
	@echo "ntLink: Scaffolding assemblies using long reads"
	@echo "ntLink v0.0.1"
	@echo "Usage: ntLink scaffold target=<target scaffolds> reads='List of long read files'"
	@echo ""
	@echo "Options:"
	@echo "target			Target assembly to be scaffolded in fasta format"
	@echo "reads			List of long read files (separated by a space)"
	@echo "prefix			Prefix of intermediate output files [out.k<k>.w<w>.n<n>]"
	@echo "t			Number of threads [4]"
	@echo "k			K-mer size for minimizers [32]"
	@echo "w			Window size for minimizers (bp) [250]"
	@echo "n			Minimum graph edge weight [2]"
	@echo "g			Minimum gap size (bp) [20]"
	@echo "f			Maximum number of contigs in a run for full transitive edge addition [10]"
	@echo "a			Minimum number of anchored ONT reads required for an edge [1]"
	@echo "z			Minimum size of contig (bp) to scaffold [500]"
	@echo "v			If 1, track time and memory for each step of the pipeline [0]"
	@echo ""
	@echo "Note: "
	@echo "	- Ensure all assembly and read files are in the current working directory, making soft links if neccessary"
	@echo ""

scaffold: check_params \
	ntLink_graph \
	abyss_scaffold

ntLink_graph: $(target).k$(k).w$(w).tsv \
	$(prefix).scaffold.dot

abyss_scaffold: $(prefix).scaffold.dot \
	$(target).k$(k).w$(w).n$(n).z$(z).abyss-scaffold.fa

check_params:
ifeq ($(reads), None)
	$(error ERROR: Must set reads)
endif
ifeq ($(target), None)
	$(error ERROR: Must set target)
endif

version:
	@echo "ntLink v0.0.1"
	@echo "Written by Lauren Coombe (lcoombe@bcgsc.ca)"

clean:
	rm $(target).k$(k).w$(w).tsv

.PHONY: help scaffold version check_params clean
.DELETE_ON_ERROR:
.SECONDARY:

%.k$(k).w$(w).tsv: %
	$(time) $(ntlink_path)/src/indexlr --pos --strand -k $(k) -w $(w) -t $(t) $< > $@

%.fa.gz: %.fa
	$(time) $(gzip) $<

$(prefix).scaffold.dot: $(target).k$(k).w$(w).tsv $(reads)
	$(time) $(gzip) -cd $(reads) | \
	$(ntlink_path)/src/indexlr --pos --strand -k $(k) -w $(w) -t $(t) - | \
  	$(ntlink_path)/bin/ntlink_pair.py -p $(prefix) -n $(n) -m $< -s $(target)  \
	-k $(k) -a $(a) -z $(z) -f $(f) -

# Run abyss-scaffold scaffolding layout
$(prefix).abyss-scaffold.path: $(prefix).scaffold.dot
	$(time) abyss-scaffold -k2 -n$(n)-20 -s$(z) --min-gap $(g) -g $(prefix).scaffold.abyss-scaffold.dot $(target) $< > $@

$(target).k$(k).w$(w).n$(n).z$(z).abyss-scaffold.fa: $(prefix).abyss-scaffold.path
	$(time) MergeContigs -k2 $(target) $< > $@

